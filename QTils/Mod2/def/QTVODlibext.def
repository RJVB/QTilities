DEFINITION MODULE QTVODlibext;

<*/VALIDVERSION:USE_TIMEDCALLBACK*>

FROM SYSTEM IMPORT
	ADDRESS;

%IF CHAUSSETTE2 %THEN
FROM Chaussette2 IMPORT
%ELSE
FROM Chaussette IMPORT
%END
	sock_nulle, SOCK;

FROM QTilsM2 IMPORT
	QTMovieWindowH, Movie, Int32, UInt32, Real64, ErrCode, XMLElement, XML_RECORD, QTCallBack;

FROM QTVODcomm IMPORT
	(* ces types sont définis dans QTVODcomm.def pour ne pas obliger d'inclure QTVODlibext
	 * pour des logiciels qui ne font que communiquer avec QTVODm2 !
	 *)
	VODDescription, URLString;

%IF WIN32 %THEN
	FROM WIN32 IMPORT
		HWND;
%ELSE
	FROM Windows IMPORT
		HWND;
%END

(* test
FROM QTilsM2 IMPORT
	XMLElement, XML_RECORD, UInt32;
*)

TYPE

	CurrentTimeSubscription =
		RECORD
			(* l'intervalle à envoyer le temps courant dans la fenêtre 'forward' *)
			sendInterval,
				(* le dernier temps que cet envoi a eu lieu *)
				lastSentTime,
				(* le dernier temps envoyé *)
				lastMovieTime, lastForcedMovieTime : Real64;
			(* envoyer le temps absolut? *)
			absolute, forcePump : BOOLEAN;
		END;

PROCEDURE HRTime() : Real64;
PROCEDURE SetTimes( t : Real64; ref : QTMovieWindowH; absolute : Int32 ) : BOOLEAN;
PROCEDURE StartVideo(excl : QTMovieWindowH);
PROCEDURE StepVideo(excl : QTMovieWindowH ; steps : Int32);
PROCEDURE StopVideo(excl : QTMovieWindowH);
PROCEDURE register_window( AqtwmH : ARRAY OF QTMovieWindowH; idx : CARDINAL );
PROCEDURE DisplayVideo( VAR URL : URLString; VAR description : VODDescription ) : ErrCode;
PROCEDURE FlushCaches;
PROCEDURE CloseVideo(final : BOOLEAN);
PROCEDURE ResetVideo(complete : BOOLEAN) : ErrCode;
PROCEDURE isPlayable(wih : QTMovieWindowH) : BOOLEAN;
PROCEDURE ClipInt( VAR val : INTEGER; min, max : INTEGER );
PROCEDURE BenchmarkPlaybackRate;
PROCEDURE CalcTimeInterval(reset, display : BOOLEAN);
%IF USE_TIMEDCALLBACK %THEN
PROCEDURE PumpSubscriptions( cbRegister : QTCallBack; params : Int32 ) [CDECL];
%ELSE
PROCEDURE PumpSubscriptions(wih : QTMovieWindowH; params : ADDRESS ) : Int32 [CDECL];
%END
PROCEDURE timeCallBack( cbRegister : QTCallBack; params : Int32 ) [CDECL];

PROCEDURE showMetaData();
PROCEDURE SetWindowLayer( pos : HWND; ref : QTMovieWindowH );

(* test
PROCEDURE FrequencyFromXMLElementAttributes( theElement : XMLElement; elm : UInt32;
								design : ARRAY OF XML_RECORD; idx : UInt32; fName : ARRAY OF CHAR ) : ErrCode;
*)

CONST
	maxQTWM = 4;
	fwWin = 0;
	pilotWin = 1;
	leftWin = 2;
	rightWin = 3;
	tcWin = 4;
	qtCallBacksAllowedAtInterrupt = 1;

VAR
	numQTWM : Int32;
	qtwmH : ARRAY[0..maxQTWM] OF QTMovieWindowH;
	sServeur : SOCK;
	lastKeyUp : CHAR;
	fullMovieChanged : BOOLEAN;
	currentTimeSubscription : CurrentTimeSubscription;
	callbackRegister : QTCallBack;

END QTVODlibext.
