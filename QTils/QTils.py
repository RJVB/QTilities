# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_QTils', [dirname(__file__)])
        except ImportError:
            import _QTils
            return _QTils
        if fp is not None:
            try:
                _mod = imp.load_module('_QTils', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _QTils = swig_import_helper()
    del swig_import_helper
else:
    import _QTils
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


akAuthor = _QTils.akAuthor
akComment = _QTils.akComment
akCopyRight = _QTils.akCopyRight
akDisplayName = _QTils.akDisplayName
akInfo = _QTils.akInfo
akKeywords = _QTils.akKeywords
akDescr = _QTils.akDescr
akFormat = _QTils.akFormat
akSource = _QTils.akSource
akSoftware = _QTils.akSoftware
akWriter = _QTils.akWriter
akYear = _QTils.akYear
akCreationDate = _QTils.akCreationDate
akTrack = _QTils.akTrack
class Cartesian(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cartesian, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cartesian, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vertical"] = _QTils.Cartesian_vertical_set
    __swig_getmethods__["vertical"] = _QTils.Cartesian_vertical_get
    if _newclass:vertical = _swig_property(_QTils.Cartesian_vertical_get, _QTils.Cartesian_vertical_set)
    __swig_setmethods__["horizontal"] = _QTils.Cartesian_horizontal_set
    __swig_getmethods__["horizontal"] = _QTils.Cartesian_horizontal_get
    if _newclass:horizontal = _swig_property(_QTils.Cartesian_horizontal_get, _QTils.Cartesian_horizontal_set)
    def __init__(self): 
        this = _QTils.new_Cartesian()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_Cartesian
    __del__ = lambda self : None;
Cartesian_swigregister = _QTils.Cartesian_swigregister
Cartesian_swigregister(Cartesian)

class TCTrackInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCTrackInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TCTrackInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["theURL"] = _QTils.TCTrackInfo_theURL_set
    __swig_getmethods__["theURL"] = _QTils.TCTrackInfo_theURL_get
    if _newclass:theURL = _swig_property(_QTils.TCTrackInfo_theURL_get, _QTils.TCTrackInfo_theURL_set)
    __swig_setmethods__["theTCTrack"] = _QTils.TCTrackInfo_theTCTrack_set
    __swig_getmethods__["theTCTrack"] = _QTils.TCTrackInfo_theTCTrack_get
    if _newclass:theTCTrack = _swig_property(_QTils.TCTrackInfo_theTCTrack_get, _QTils.TCTrackInfo_theTCTrack_set)
    __swig_setmethods__["N"] = _QTils.TCTrackInfo_N_set
    __swig_getmethods__["N"] = _QTils.TCTrackInfo_N_get
    if _newclass:N = _swig_property(_QTils.TCTrackInfo_N_get, _QTils.TCTrackInfo_N_set)
    __swig_setmethods__["StartTimes"] = _QTils.TCTrackInfo_StartTimes_set
    __swig_getmethods__["StartTimes"] = _QTils.TCTrackInfo_StartTimes_get
    if _newclass:StartTimes = _swig_property(_QTils.TCTrackInfo_StartTimes_get, _QTils.TCTrackInfo_StartTimes_set)
    __swig_setmethods__["durations"] = _QTils.TCTrackInfo_durations_set
    __swig_getmethods__["durations"] = _QTils.TCTrackInfo_durations_get
    if _newclass:durations = _swig_property(_QTils.TCTrackInfo_durations_get, _QTils.TCTrackInfo_durations_set)
    __swig_setmethods__["frames"] = _QTils.TCTrackInfo_frames_set
    __swig_getmethods__["frames"] = _QTils.TCTrackInfo_frames_get
    if _newclass:frames = _swig_property(_QTils.TCTrackInfo_frames_get, _QTils.TCTrackInfo_frames_set)
    __swig_setmethods__["dealloc"] = _QTils.TCTrackInfo_dealloc_set
    __swig_getmethods__["dealloc"] = _QTils.TCTrackInfo_dealloc_get
    if _newclass:dealloc = _swig_property(_QTils.TCTrackInfo_dealloc_get, _QTils.TCTrackInfo_dealloc_set)
    __swig_setmethods__["cdr"] = _QTils.TCTrackInfo_cdr_set
    __swig_getmethods__["cdr"] = _QTils.TCTrackInfo_cdr_get
    if _newclass:cdr = _swig_property(_QTils.TCTrackInfo_cdr_get, _QTils.TCTrackInfo_cdr_set)
    def __init__(self): 
        this = _QTils.new_TCTrackInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_TCTrackInfo
    __del__ = lambda self : None;
TCTrackInfo_swigregister = _QTils.TCTrackInfo_swigregister
TCTrackInfo_swigregister(TCTrackInfo)

noErr = _QTils.noErr
class MovieFrameTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MovieFrameTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MovieFrameTime, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hours"] = _QTils.MovieFrameTime_hours_set
    __swig_getmethods__["hours"] = _QTils.MovieFrameTime_hours_get
    if _newclass:hours = _swig_property(_QTils.MovieFrameTime_hours_get, _QTils.MovieFrameTime_hours_set)
    __swig_setmethods__["minutes"] = _QTils.MovieFrameTime_minutes_set
    __swig_getmethods__["minutes"] = _QTils.MovieFrameTime_minutes_get
    if _newclass:minutes = _swig_property(_QTils.MovieFrameTime_minutes_get, _QTils.MovieFrameTime_minutes_set)
    __swig_setmethods__["seconds"] = _QTils.MovieFrameTime_seconds_set
    __swig_getmethods__["seconds"] = _QTils.MovieFrameTime_seconds_get
    if _newclass:seconds = _swig_property(_QTils.MovieFrameTime_seconds_get, _QTils.MovieFrameTime_seconds_set)
    __swig_setmethods__["frames"] = _QTils.MovieFrameTime_frames_set
    __swig_getmethods__["frames"] = _QTils.MovieFrameTime_frames_get
    if _newclass:frames = _swig_property(_QTils.MovieFrameTime_frames_get, _QTils.MovieFrameTime_frames_set)
    def __init__(self): 
        this = _QTils.new_MovieFrameTime()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_MovieFrameTime
    __del__ = lambda self : None;
MovieFrameTime_swigregister = _QTils.MovieFrameTime_swigregister
MovieFrameTime_swigregister(MovieFrameTime)

kMovieLoadStateError = _QTils.kMovieLoadStateError
kMovieLoadStateLoading = _QTils.kMovieLoadStateLoading
kMovieLoadStateLoaded = _QTils.kMovieLoadStateLoaded
kMovieLoadStatePlayable = _QTils.kMovieLoadStatePlayable
kMovieLoadStatePlaythroughOK = _QTils.kMovieLoadStatePlaythroughOK
kMovieLoadStateComplete = _QTils.kMovieLoadStateComplete
paramErr = _QTils.paramErr
class Rect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["top"] = _QTils.Rect_top_set
    __swig_getmethods__["top"] = _QTils.Rect_top_get
    if _newclass:top = _swig_property(_QTils.Rect_top_get, _QTils.Rect_top_set)
    __swig_setmethods__["left"] = _QTils.Rect_left_set
    __swig_getmethods__["left"] = _QTils.Rect_left_get
    if _newclass:left = _swig_property(_QTils.Rect_left_get, _QTils.Rect_left_set)
    __swig_setmethods__["bottom"] = _QTils.Rect_bottom_set
    __swig_getmethods__["bottom"] = _QTils.Rect_bottom_get
    if _newclass:bottom = _swig_property(_QTils.Rect_bottom_get, _QTils.Rect_bottom_set)
    __swig_setmethods__["right"] = _QTils.Rect_right_set
    __swig_getmethods__["right"] = _QTils.Rect_right_get
    if _newclass:right = _swig_property(_QTils.Rect_right_get, _QTils.Rect_right_set)
    def __init__(self): 
        this = _QTils.new_Rect()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_Rect
    __del__ = lambda self : None;
Rect_swigregister = _QTils.Rect_swigregister
Rect_swigregister(Rect)

class EventRecord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventRecord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventRecord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["what"] = _QTils.EventRecord_what_set
    __swig_getmethods__["what"] = _QTils.EventRecord_what_get
    if _newclass:what = _swig_property(_QTils.EventRecord_what_get, _QTils.EventRecord_what_set)
    __swig_setmethods__["message"] = _QTils.EventRecord_message_set
    __swig_getmethods__["message"] = _QTils.EventRecord_message_get
    if _newclass:message = _swig_property(_QTils.EventRecord_message_get, _QTils.EventRecord_message_set)
    __swig_setmethods__["when"] = _QTils.EventRecord_when_set
    __swig_getmethods__["when"] = _QTils.EventRecord_when_get
    if _newclass:when = _swig_property(_QTils.EventRecord_when_get, _QTils.EventRecord_when_set)
    __swig_setmethods__["where"] = _QTils.EventRecord_where_set
    __swig_getmethods__["where"] = _QTils.EventRecord_where_get
    if _newclass:where = _swig_property(_QTils.EventRecord_where_get, _QTils.EventRecord_where_set)
    __swig_setmethods__["modifiers"] = _QTils.EventRecord_modifiers_set
    __swig_getmethods__["modifiers"] = _QTils.EventRecord_modifiers_get
    if _newclass:modifiers = _swig_property(_QTils.EventRecord_modifiers_get, _QTils.EventRecord_modifiers_set)
    def __init__(self): 
        this = _QTils.new_EventRecord()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_EventRecord
    __del__ = lambda self : None;
EventRecord_swigregister = _QTils.EventRecord_swigregister
EventRecord_swigregister(EventRecord)


def P2Cstr(*args):
  return _QTils.P2Cstr(*args)
P2Cstr = _QTils.P2Cstr

def OSTStr(*args):
  return _QTils.OSTStr(*args)
OSTStr = _QTils.OSTStr

def AskFileName(*args):
  return _QTils.AskFileName(*args)
AskFileName = _QTils.AskFileName

def AskSaveFileName(*args):
  return _QTils.AskSaveFileName(*args)
AskSaveFileName = _QTils.AskSaveFileName

def MacErrorString(*args):
  return _QTils.MacErrorString(*args)
MacErrorString = _QTils.MacErrorString

def OpenMovieFromURL(*args):
  return _QTils.OpenMovieFromURL(*args)
OpenMovieFromURL = _QTils.OpenMovieFromURL

def SaveMovie(*args):
  return _QTils.SaveMovie(*args)
SaveMovie = _QTils.SaveMovie

def SaveMovieAsRefMov(*args):
  return _QTils.SaveMovieAsRefMov(*args)
SaveMovieAsRefMov = _QTils.SaveMovieAsRefMov

def SaveMovieAs(*args):
  return _QTils.SaveMovieAs(*args)
SaveMovieAs = _QTils.SaveMovieAs

def FlattenMovieToURL(*args):
  return _QTils.FlattenMovieToURL(*args)
FlattenMovieToURL = _QTils.FlattenMovieToURL

def CloseMovie(*args):
  return _QTils.CloseMovie(*args)
CloseMovie = _QTils.CloseMovie

def HasMovieChanged_Mod2(*args):
  return _QTils.HasMovieChanged_Mod2(*args)
HasMovieChanged_Mod2 = _QTils.HasMovieChanged_Mod2

def FindTextInMovie(*args):
  return _QTils.FindTextInMovie(*args)
FindTextInMovie = _QTils.FindTextInMovie

def GetMovieChapterCount(*args):
  return _QTils.GetMovieChapterCount(*args)
GetMovieChapterCount = _QTils.GetMovieChapterCount

def GetMovieIndChapter(*args):
  return _QTils.GetMovieIndChapter(*args)
GetMovieIndChapter = _QTils.GetMovieIndChapter

def MovieAddChapter(*args):
  return _QTils.MovieAddChapter(*args)
MovieAddChapter = _QTils.MovieAddChapter

def GetMovieDurationSeconds(*args):
  return _QTils.GetMovieDurationSeconds(*args)
GetMovieDurationSeconds = _QTils.GetMovieDurationSeconds

def GetMovieTimeResolution(*args):
  return _QTils.GetMovieTimeResolution(*args)
GetMovieTimeResolution = _QTils.GetMovieTimeResolution

def secondsToFrameTime(*args):
  return _QTils.secondsToFrameTime(*args)
secondsToFrameTime = _QTils.secondsToFrameTime

def PumpMessages(*args):
  return _QTils.PumpMessages(*args)
PumpMessages = _QTils.PumpMessages

def OpenQT():
  return _QTils.OpenQT()
OpenQT = _QTils.OpenQT

def CloseQT():
  return _QTils.CloseQT()
CloseQT = _QTils.CloseQT

def LastQTError():
  return _QTils.LastQTError()
LastQTError = _QTils.LastQTError
class QTMovieInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QTMovieInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QTMovieInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["frameRate"] = _QTils.QTMovieInfo_frameRate_set
    __swig_getmethods__["frameRate"] = _QTils.QTMovieInfo_frameRate_get
    if _newclass:frameRate = _swig_property(_QTils.QTMovieInfo_frameRate_get, _QTils.QTMovieInfo_frameRate_set)
    __swig_setmethods__["TCframeRate"] = _QTils.QTMovieInfo_TCframeRate_set
    __swig_getmethods__["TCframeRate"] = _QTils.QTMovieInfo_TCframeRate_get
    if _newclass:TCframeRate = _swig_property(_QTils.QTMovieInfo_TCframeRate_get, _QTils.QTMovieInfo_TCframeRate_set)
    __swig_setmethods__["duration"] = _QTils.QTMovieInfo_duration_set
    __swig_getmethods__["duration"] = _QTils.QTMovieInfo_duration_get
    if _newclass:duration = _swig_property(_QTils.QTMovieInfo_duration_get, _QTils.QTMovieInfo_duration_set)
    __swig_setmethods__["startTime"] = _QTils.QTMovieInfo_startTime_set
    __swig_getmethods__["startTime"] = _QTils.QTMovieInfo_startTime_get
    if _newclass:startTime = _swig_property(_QTils.QTMovieInfo_startTime_get, _QTils.QTMovieInfo_startTime_set)
    __swig_setmethods__["timeScale"] = _QTils.QTMovieInfo_timeScale_set
    __swig_getmethods__["timeScale"] = _QTils.QTMovieInfo_timeScale_get
    if _newclass:timeScale = _swig_property(_QTils.QTMovieInfo_timeScale_get, _QTils.QTMovieInfo_timeScale_set)
    __swig_setmethods__["startFrameNr"] = _QTils.QTMovieInfo_startFrameNr_set
    __swig_getmethods__["startFrameNr"] = _QTils.QTMovieInfo_startFrameNr_get
    if _newclass:startFrameNr = _swig_property(_QTils.QTMovieInfo_startFrameNr_get, _QTils.QTMovieInfo_startFrameNr_set)
    __swig_setmethods__["naturalBounds"] = _QTils.QTMovieInfo_naturalBounds_set
    __swig_getmethods__["naturalBounds"] = _QTils.QTMovieInfo_naturalBounds_get
    if _newclass:naturalBounds = _swig_property(_QTils.QTMovieInfo_naturalBounds_get, _QTils.QTMovieInfo_naturalBounds_set)
    __swig_setmethods__["controllerHeight"] = _QTils.QTMovieInfo_controllerHeight_set
    __swig_getmethods__["controllerHeight"] = _QTils.QTMovieInfo_controllerHeight_get
    if _newclass:controllerHeight = _swig_property(_QTils.QTMovieInfo_controllerHeight_get, _QTils.QTMovieInfo_controllerHeight_set)
    def __init__(self): 
        this = _QTils.new_QTMovieInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_QTMovieInfo
    __del__ = lambda self : None;
QTMovieInfo_swigregister = _QTils.QTMovieInfo_swigregister
QTMovieInfo_swigregister(QTMovieInfo)

class QTMovieWindows(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QTMovieWindows, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QTMovieWindows, name)
    __repr__ = _swig_repr
    __swig_setmethods__["self"] = _QTils.QTMovieWindows_self_set
    __swig_getmethods__["self"] = _QTils.QTMovieWindows_self_get
    if _newclass:self = _swig_property(_QTils.QTMovieWindows_self_get, _QTils.QTMovieWindows_self_set)
    __swig_setmethods__["theView"] = _QTils.QTMovieWindows_theView_set
    __swig_getmethods__["theView"] = _QTils.QTMovieWindows_theView_get
    if _newclass:theView = _swig_property(_QTils.QTMovieWindows_theView_get, _QTils.QTMovieWindows_theView_set)
    __swig_setmethods__["theViewPtr"] = _QTils.QTMovieWindows_theViewPtr_set
    __swig_getmethods__["theViewPtr"] = _QTils.QTMovieWindows_theViewPtr_get
    if _newclass:theViewPtr = _swig_property(_QTils.QTMovieWindows_theViewPtr_get, _QTils.QTMovieWindows_theViewPtr_set)
    __swig_setmethods__["theURL"] = _QTils.QTMovieWindows_theURL_set
    __swig_getmethods__["theURL"] = _QTils.QTMovieWindows_theURL_get
    if _newclass:theURL = _swig_property(_QTils.QTMovieWindows_theURL_get, _QTils.QTMovieWindows_theURL_set)
    __swig_setmethods__["idx"] = _QTils.QTMovieWindows_idx_set
    __swig_getmethods__["idx"] = _QTils.QTMovieWindows_idx_get
    if _newclass:idx = _swig_property(_QTils.QTMovieWindows_idx_get, _QTils.QTMovieWindows_idx_set)
    __swig_setmethods__["isPlaying"] = _QTils.QTMovieWindows_isPlaying_set
    __swig_getmethods__["isPlaying"] = _QTils.QTMovieWindows_isPlaying_get
    if _newclass:isPlaying = _swig_property(_QTils.QTMovieWindows_isPlaying_get, _QTils.QTMovieWindows_isPlaying_set)
    __swig_setmethods__["isActive"] = _QTils.QTMovieWindows_isActive_set
    __swig_getmethods__["isActive"] = _QTils.QTMovieWindows_isActive_get
    if _newclass:isActive = _swig_property(_QTils.QTMovieWindows_isActive_get, _QTils.QTMovieWindows_isActive_set)
    __swig_setmethods__["loadState"] = _QTils.QTMovieWindows_loadState_set
    __swig_getmethods__["loadState"] = _QTils.QTMovieWindows_loadState_get
    if _newclass:loadState = _swig_property(_QTils.QTMovieWindows_loadState_get, _QTils.QTMovieWindows_loadState_set)
    __swig_setmethods__["wasStepped"] = _QTils.QTMovieWindows_wasStepped_set
    __swig_getmethods__["wasStepped"] = _QTils.QTMovieWindows_wasStepped_get
    if _newclass:wasStepped = _swig_property(_QTils.QTMovieWindows_wasStepped_get, _QTils.QTMovieWindows_wasStepped_set)
    __swig_setmethods__["wasScanned"] = _QTils.QTMovieWindows_wasScanned_set
    __swig_getmethods__["wasScanned"] = _QTils.QTMovieWindows_wasScanned_get
    if _newclass:wasScanned = _swig_property(_QTils.QTMovieWindows_wasScanned_get, _QTils.QTMovieWindows_wasScanned_set)
    __swig_setmethods__["handlingEvent"] = _QTils.QTMovieWindows_handlingEvent_set
    __swig_getmethods__["handlingEvent"] = _QTils.QTMovieWindows_handlingEvent_get
    if _newclass:handlingEvent = _swig_property(_QTils.QTMovieWindows_handlingEvent_get, _QTils.QTMovieWindows_handlingEvent_set)
    __swig_setmethods__["shouldClose"] = _QTils.QTMovieWindows_shouldClose_set
    __swig_getmethods__["shouldClose"] = _QTils.QTMovieWindows_shouldClose_get
    if _newclass:shouldClose = _swig_property(_QTils.QTMovieWindows_shouldClose_get, _QTils.QTMovieWindows_shouldClose_set)
    __swig_setmethods__["theMovie"] = _QTils.QTMovieWindows_theMovie_set
    __swig_getmethods__["theMovie"] = _QTils.QTMovieWindows_theMovie_get
    if _newclass:theMovie = _swig_property(_QTils.QTMovieWindows_theMovie_get, _QTils.QTMovieWindows_theMovie_set)
    __swig_setmethods__["info"] = _QTils.QTMovieWindows_info_set
    __swig_getmethods__["info"] = _QTils.QTMovieWindows_info_get
    if _newclass:info = _swig_property(_QTils.QTMovieWindows_info_get, _QTils.QTMovieWindows_info_set)
    __swig_setmethods__["user_data"] = _QTils.QTMovieWindows_user_data_set
    __swig_getmethods__["user_data"] = _QTils.QTMovieWindows_user_data_get
    if _newclass:user_data = _swig_property(_QTils.QTMovieWindows_user_data_get, _QTils.QTMovieWindows_user_data_set)
    def __init__(self): 
        this = _QTils.new_QTMovieWindows()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_QTMovieWindows
    __del__ = lambda self : None;
QTMovieWindows_swigregister = _QTils.QTMovieWindows_swigregister
QTMovieWindows_swigregister(QTMovieWindows)

class MCActions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCActions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCActions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Step"] = _QTils.MCActions_Step_set
    __swig_getmethods__["Step"] = _QTils.MCActions_Step_get
    if _newclass:Step = _swig_property(_QTils.MCActions_Step_get, _QTils.MCActions_Step_set)
    __swig_setmethods__["Play"] = _QTils.MCActions_Play_set
    __swig_getmethods__["Play"] = _QTils.MCActions_Play_get
    if _newclass:Play = _swig_property(_QTils.MCActions_Play_get, _QTils.MCActions_Play_set)
    __swig_setmethods__["Activate"] = _QTils.MCActions_Activate_set
    __swig_getmethods__["Activate"] = _QTils.MCActions_Activate_get
    if _newclass:Activate = _swig_property(_QTils.MCActions_Activate_get, _QTils.MCActions_Activate_set)
    __swig_setmethods__["Deactivate"] = _QTils.MCActions_Deactivate_set
    __swig_getmethods__["Deactivate"] = _QTils.MCActions_Deactivate_get
    if _newclass:Deactivate = _swig_property(_QTils.MCActions_Deactivate_get, _QTils.MCActions_Deactivate_set)
    __swig_setmethods__["GoToTime"] = _QTils.MCActions_GoToTime_set
    __swig_getmethods__["GoToTime"] = _QTils.MCActions_GoToTime_get
    if _newclass:GoToTime = _swig_property(_QTils.MCActions_GoToTime_get, _QTils.MCActions_GoToTime_set)
    __swig_setmethods__["MouseDown"] = _QTils.MCActions_MouseDown_set
    __swig_getmethods__["MouseDown"] = _QTils.MCActions_MouseDown_get
    if _newclass:MouseDown = _swig_property(_QTils.MCActions_MouseDown_get, _QTils.MCActions_MouseDown_set)
    __swig_setmethods__["MovieClick"] = _QTils.MCActions_MovieClick_set
    __swig_getmethods__["MovieClick"] = _QTils.MCActions_MovieClick_get
    if _newclass:MovieClick = _swig_property(_QTils.MCActions_MovieClick_get, _QTils.MCActions_MovieClick_set)
    __swig_setmethods__["KeyUp"] = _QTils.MCActions_KeyUp_set
    __swig_getmethods__["KeyUp"] = _QTils.MCActions_KeyUp_get
    if _newclass:KeyUp = _swig_property(_QTils.MCActions_KeyUp_get, _QTils.MCActions_KeyUp_set)
    __swig_setmethods__["Suspend"] = _QTils.MCActions_Suspend_set
    __swig_getmethods__["Suspend"] = _QTils.MCActions_Suspend_get
    if _newclass:Suspend = _swig_property(_QTils.MCActions_Suspend_get, _QTils.MCActions_Suspend_set)
    __swig_setmethods__["Resume"] = _QTils.MCActions_Resume_set
    __swig_getmethods__["Resume"] = _QTils.MCActions_Resume_get
    if _newclass:Resume = _swig_property(_QTils.MCActions_Resume_get, _QTils.MCActions_Resume_set)
    __swig_setmethods__["LoadState"] = _QTils.MCActions_LoadState_set
    __swig_getmethods__["LoadState"] = _QTils.MCActions_LoadState_get
    if _newclass:LoadState = _swig_property(_QTils.MCActions_LoadState_get, _QTils.MCActions_LoadState_set)
    __swig_setmethods__["Finished"] = _QTils.MCActions_Finished_set
    __swig_getmethods__["Finished"] = _QTils.MCActions_Finished_get
    if _newclass:Finished = _swig_property(_QTils.MCActions_Finished_get, _QTils.MCActions_Finished_set)
    __swig_setmethods__["Idle"] = _QTils.MCActions_Idle_set
    __swig_getmethods__["Idle"] = _QTils.MCActions_Idle_get
    if _newclass:Idle = _swig_property(_QTils.MCActions_Idle_get, _QTils.MCActions_Idle_set)
    __swig_setmethods__["Start"] = _QTils.MCActions_Start_set
    __swig_getmethods__["Start"] = _QTils.MCActions_Start_get
    if _newclass:Start = _swig_property(_QTils.MCActions_Start_get, _QTils.MCActions_Start_set)
    __swig_setmethods__["Stop"] = _QTils.MCActions_Stop_set
    __swig_getmethods__["Stop"] = _QTils.MCActions_Stop_get
    if _newclass:Stop = _swig_property(_QTils.MCActions_Stop_get, _QTils.MCActions_Stop_set)
    __swig_setmethods__["Close"] = _QTils.MCActions_Close_set
    __swig_getmethods__["Close"] = _QTils.MCActions_Close_get
    if _newclass:Close = _swig_property(_QTils.MCActions_Close_get, _QTils.MCActions_Close_set)
    def __init__(self): 
        this = _QTils.new_MCActions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_MCActions
    __del__ = lambda self : None;
MCActions_swigregister = _QTils.MCActions_swigregister
MCActions_swigregister(MCActions)


def _QTMovieWindowH_Check_(*args):
  return _QTils._QTMovieWindowH_Check_(*args)
_QTMovieWindowH_Check_ = _QTils._QTMovieWindowH_Check_

def InitQTMovieWindows(*args):
  return _QTils.InitQTMovieWindows(*args)
InitQTMovieWindows = _QTils.InitQTMovieWindows

def DisposeQTMovieWindow(*args):
  return _QTils.DisposeQTMovieWindow(*args)
DisposeQTMovieWindow = _QTils.DisposeQTMovieWindow

def CloseQTMovieWindow(*args):
  return _QTils.CloseQTMovieWindow(*args)
CloseQTMovieWindow = _QTils.CloseQTMovieWindow

def OpenQTMovieInWindow(*args):
  return _QTils.OpenQTMovieInWindow(*args)
OpenQTMovieInWindow = _QTils.OpenQTMovieInWindow

def NativeWindowHFromQTMovieWindowH(*args):
  return _QTils.NativeWindowHFromQTMovieWindowH(*args)
NativeWindowHFromQTMovieWindowH = _QTils.NativeWindowHFromQTMovieWindowH

def ActivateQTMovieWindow(*args):
  return _QTils.ActivateQTMovieWindow(*args)
ActivateQTMovieWindow = _QTils.ActivateQTMovieWindow

def QTMovieWindowPlay(*args):
  return _QTils.QTMovieWindowPlay(*args)
QTMovieWindowPlay = _QTils.QTMovieWindowPlay

def QTMovieWindowStop(*args):
  return _QTils.QTMovieWindowStop(*args)
QTMovieWindowStop = _QTils.QTMovieWindowStop

def QTMovieWindowToggleMCController(*args):
  return _QTils.QTMovieWindowToggleMCController(*args)
QTMovieWindowToggleMCController = _QTils.QTMovieWindowToggleMCController

def QTMovieWindowSetGeometry(*args):
  return _QTils.QTMovieWindowSetGeometry(*args)
QTMovieWindowSetGeometry = _QTils.QTMovieWindowSetGeometry

def QTMovieWindowGetGeometry(*args):
  return _QTils.QTMovieWindowGetGeometry(*args)
QTMovieWindowGetGeometry = _QTils.QTMovieWindowGetGeometry

def QTMovieWindowGetTime(*args):
  return _QTils.QTMovieWindowGetTime(*args)
QTMovieWindowGetTime = _QTils.QTMovieWindowGetTime

def QTMovieWindowGetFrameTime(*args):
  return _QTils.QTMovieWindowGetFrameTime(*args)
QTMovieWindowGetFrameTime = _QTils.QTMovieWindowGetFrameTime

def QTMovieWindowSetTime(*args):
  return _QTils.QTMovieWindowSetTime(*args)
QTMovieWindowSetTime = _QTils.QTMovieWindowSetTime

def QTMovieWindowSetFrameTime(*args):
  return _QTils.QTMovieWindowSetFrameTime(*args)
QTMovieWindowSetFrameTime = _QTils.QTMovieWindowSetFrameTime

def FindTimeStampInMovieAtTime(*args):
  return _QTils.FindTimeStampInMovieAtTime(*args)
FindTimeStampInMovieAtTime = _QTils.FindTimeStampInMovieAtTime

def GetMovieChapterTrack(*args):
  return _QTils.GetMovieChapterTrack(*args)
GetMovieChapterTrack = _QTils.GetMovieChapterTrack

def MCAction():
  return _QTils.MCAction()
MCAction = _QTils.MCAction

def register_MCAction(*args):
  return _QTils.register_MCAction(*args)
register_MCAction = _QTils.register_MCAction

def get_MCAction(*args):
  return _QTils.get_MCAction(*args)
get_MCAction = _QTils.get_MCAction

def unregister_MCAction(*args):
  return _QTils.unregister_MCAction(*args)
unregister_MCAction = _QTils.unregister_MCAction

def QTils_LogInit():
  return _QTils.QTils_LogInit()
QTils_LogInit = _QTils.QTils_LogInit

def QTils_LogFinish():
  return _QTils.QTils_LogFinish()
QTils_LogFinish = _QTils.QTils_LogFinish

def QTils_LogMsg(*args):
  return _QTils.QTils_LogMsg(*args)
QTils_LogMsg = _QTils.QTils_LogMsg

def QTils_vLogMsgEx(*args):
  return _QTils.QTils_vLogMsgEx(*args)
QTils_vLogMsgEx = _QTils.QTils_vLogMsgEx

def QTils_LogMsgEx(*args):
  return _QTils.QTils_LogMsgEx(*args)
QTils_LogMsgEx = _QTils.QTils_LogMsgEx
class RGBColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RGBColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RGBColor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["red"] = _QTils.RGBColor_red_set
    __swig_getmethods__["red"] = _QTils.RGBColor_red_get
    if _newclass:red = _swig_property(_QTils.RGBColor_red_get, _QTils.RGBColor_red_set)
    __swig_setmethods__["green"] = _QTils.RGBColor_green_set
    __swig_getmethods__["green"] = _QTils.RGBColor_green_get
    if _newclass:green = _swig_property(_QTils.RGBColor_green_get, _QTils.RGBColor_green_set)
    __swig_setmethods__["blue"] = _QTils.RGBColor_blue_set
    __swig_getmethods__["blue"] = _QTils.RGBColor_blue_get
    if _newclass:blue = _swig_property(_QTils.RGBColor_blue_get, _QTils.RGBColor_blue_set)
    def __init__(self): 
        this = _QTils.new_RGBColor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_RGBColor
    __del__ = lambda self : None;
RGBColor_swigregister = _QTils.RGBColor_swigregister
RGBColor_swigregister(RGBColor)

xmlParseComponentType = _QTils.xmlParseComponentType
xmlParseComponentSubType = _QTils.xmlParseComponentSubType
xmlIdentifierInvalid = _QTils.xmlIdentifierInvalid
xmlIdentifierUnrecognized = _QTils.xmlIdentifierUnrecognized
xmlContentTypeInvalid = _QTils.xmlContentTypeInvalid
xmlContentTypeElement = _QTils.xmlContentTypeElement
xmlContentTypeCharData = _QTils.xmlContentTypeCharData
elementFlagAlwaysSelfContained = _QTils.elementFlagAlwaysSelfContained
elementFlagPreserveWhiteSpace = _QTils.elementFlagPreserveWhiteSpace
xmlParseFlagAllowUppercase = _QTils.xmlParseFlagAllowUppercase
xmlParseFlagAllowUnquotedAttributeValues = _QTils.xmlParseFlagAllowUnquotedAttributeValues
xmlParseFlagEventParseOnly = _QTils.xmlParseFlagEventParseOnly
xmlParseFlagPreserveWhiteSpace = _QTils.xmlParseFlagPreserveWhiteSpace
attributeValueKindCharString = _QTils.attributeValueKindCharString
attributeValueKindInteger = _QTils.attributeValueKindInteger
attributeValueKindPercent = _QTils.attributeValueKindPercent
attributeValueKindBoolean = _QTils.attributeValueKindBoolean
attributeValueKindOnOff = _QTils.attributeValueKindOnOff
attributeValueKindColor = _QTils.attributeValueKindColor
attributeValueKindEnum = _QTils.attributeValueKindEnum
attributeValueKindCaseSensEnum = _QTils.attributeValueKindCaseSensEnum
MAX_ATTRIBUTE_VALUE_KIND = _QTils.MAX_ATTRIBUTE_VALUE_KIND
nameSpaceIDNone = _QTils.nameSpaceIDNone
class XMLAttributeValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLAttributeValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLAttributeValue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["number"] = _QTils.XMLAttributeValue_number_set
    __swig_getmethods__["number"] = _QTils.XMLAttributeValue_number_get
    if _newclass:number = _swig_property(_QTils.XMLAttributeValue_number_get, _QTils.XMLAttributeValue_number_set)
    __swig_setmethods__["boolean"] = _QTils.XMLAttributeValue_boolean_set
    __swig_getmethods__["boolean"] = _QTils.XMLAttributeValue_boolean_get
    if _newclass:boolean = _swig_property(_QTils.XMLAttributeValue_boolean_get, _QTils.XMLAttributeValue_boolean_set)
    __swig_setmethods__["color"] = _QTils.XMLAttributeValue_color_set
    __swig_getmethods__["color"] = _QTils.XMLAttributeValue_color_get
    if _newclass:color = _swig_property(_QTils.XMLAttributeValue_color_get, _QTils.XMLAttributeValue_color_set)
    __swig_setmethods__["enumType"] = _QTils.XMLAttributeValue_enumType_set
    __swig_getmethods__["enumType"] = _QTils.XMLAttributeValue_enumType_get
    if _newclass:enumType = _swig_property(_QTils.XMLAttributeValue_enumType_get, _QTils.XMLAttributeValue_enumType_set)
    def __init__(self): 
        this = _QTils.new_XMLAttributeValue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_XMLAttributeValue
    __del__ = lambda self : None;
XMLAttributeValue_swigregister = _QTils.XMLAttributeValue_swigregister
XMLAttributeValue_swigregister(XMLAttributeValue)

class XMLAttribute(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLAttribute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLAttribute, name)
    __repr__ = _swig_repr
    __swig_setmethods__["identifier"] = _QTils.XMLAttribute_identifier_set
    __swig_getmethods__["identifier"] = _QTils.XMLAttribute_identifier_get
    if _newclass:identifier = _swig_property(_QTils.XMLAttribute_identifier_get, _QTils.XMLAttribute_identifier_set)
    __swig_setmethods__["name"] = _QTils.XMLAttribute_name_set
    __swig_getmethods__["name"] = _QTils.XMLAttribute_name_get
    if _newclass:name = _swig_property(_QTils.XMLAttribute_name_get, _QTils.XMLAttribute_name_set)
    __swig_setmethods__["valueKind"] = _QTils.XMLAttribute_valueKind_set
    __swig_getmethods__["valueKind"] = _QTils.XMLAttribute_valueKind_get
    if _newclass:valueKind = _swig_property(_QTils.XMLAttribute_valueKind_get, _QTils.XMLAttribute_valueKind_set)
    __swig_setmethods__["value"] = _QTils.XMLAttribute_value_set
    __swig_getmethods__["value"] = _QTils.XMLAttribute_value_get
    if _newclass:value = _swig_property(_QTils.XMLAttribute_value_get, _QTils.XMLAttribute_value_set)
    __swig_setmethods__["valueStr"] = _QTils.XMLAttribute_valueStr_set
    __swig_getmethods__["valueStr"] = _QTils.XMLAttribute_valueStr_get
    if _newclass:valueStr = _swig_property(_QTils.XMLAttribute_valueStr_get, _QTils.XMLAttribute_valueStr_set)
    def __init__(self): 
        this = _QTils.new_XMLAttribute()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_XMLAttribute
    __del__ = lambda self : None;
XMLAttribute_swigregister = _QTils.XMLAttribute_swigregister
XMLAttribute_swigregister(XMLAttribute)

class XMLElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLElement, name)
    __repr__ = _swig_repr
    __swig_setmethods__["identifier"] = _QTils.XMLElement_identifier_set
    __swig_getmethods__["identifier"] = _QTils.XMLElement_identifier_get
    if _newclass:identifier = _swig_property(_QTils.XMLElement_identifier_get, _QTils.XMLElement_identifier_set)
    __swig_setmethods__["name"] = _QTils.XMLElement_name_set
    __swig_getmethods__["name"] = _QTils.XMLElement_name_get
    if _newclass:name = _swig_property(_QTils.XMLElement_name_get, _QTils.XMLElement_name_set)
    __swig_setmethods__["attributes"] = _QTils.XMLElement_attributes_set
    __swig_getmethods__["attributes"] = _QTils.XMLElement_attributes_get
    if _newclass:attributes = _swig_property(_QTils.XMLElement_attributes_get, _QTils.XMLElement_attributes_set)
    __swig_setmethods__["contents"] = _QTils.XMLElement_contents_set
    __swig_getmethods__["contents"] = _QTils.XMLElement_contents_get
    if _newclass:contents = _swig_property(_QTils.XMLElement_contents_get, _QTils.XMLElement_contents_set)
    def __init__(self): 
        this = _QTils.new_XMLElement()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_XMLElement
    __del__ = lambda self : None;
XMLElement_swigregister = _QTils.XMLElement_swigregister
XMLElement_swigregister(XMLElement)

class XMLElementContent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLElementContent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLElementContent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["element"] = _QTils.XMLElementContent_element_set
    __swig_getmethods__["element"] = _QTils.XMLElementContent_element_get
    if _newclass:element = _swig_property(_QTils.XMLElementContent_element_get, _QTils.XMLElementContent_element_set)
    __swig_setmethods__["charData"] = _QTils.XMLElementContent_charData_set
    __swig_getmethods__["charData"] = _QTils.XMLElementContent_charData_get
    if _newclass:charData = _swig_property(_QTils.XMLElementContent_charData_get, _QTils.XMLElementContent_charData_set)
    def __init__(self): 
        this = _QTils.new_XMLElementContent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_XMLElementContent
    __del__ = lambda self : None;
XMLElementContent_swigregister = _QTils.XMLElementContent_swigregister
XMLElementContent_swigregister(XMLElementContent)

class XMLContent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLContent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLContent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["kind"] = _QTils.XMLContent_kind_set
    __swig_getmethods__["kind"] = _QTils.XMLContent_kind_get
    if _newclass:kind = _swig_property(_QTils.XMLContent_kind_get, _QTils.XMLContent_kind_set)
    __swig_setmethods__["actualContent"] = _QTils.XMLContent_actualContent_set
    __swig_getmethods__["actualContent"] = _QTils.XMLContent_actualContent_get
    if _newclass:actualContent = _swig_property(_QTils.XMLContent_actualContent_get, _QTils.XMLContent_actualContent_set)
    def __init__(self): 
        this = _QTils.new_XMLContent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_XMLContent
    __del__ = lambda self : None;
XMLContent_swigregister = _QTils.XMLContent_swigregister
XMLContent_swigregister(XMLContent)

class XMLDocRecord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLDocRecord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLDocRecord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xmlDataStorage"] = _QTils.XMLDocRecord_xmlDataStorage_set
    __swig_getmethods__["xmlDataStorage"] = _QTils.XMLDocRecord_xmlDataStorage_get
    if _newclass:xmlDataStorage = _swig_property(_QTils.XMLDocRecord_xmlDataStorage_get, _QTils.XMLDocRecord_xmlDataStorage_set)
    __swig_setmethods__["rootElement"] = _QTils.XMLDocRecord_rootElement_set
    __swig_getmethods__["rootElement"] = _QTils.XMLDocRecord_rootElement_get
    if _newclass:rootElement = _swig_property(_QTils.XMLDocRecord_rootElement_get, _QTils.XMLDocRecord_rootElement_set)
    def __init__(self): 
        this = _QTils.new_XMLDocRecord()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_XMLDocRecord
    __del__ = lambda self : None;
XMLDocRecord_swigregister = _QTils.XMLDocRecord_swigregister
XMLDocRecord_swigregister(XMLDocRecord)

attributeNotFound = _QTils.attributeNotFound
xml_element = _QTils.xml_element
xml_attribute = _QTils.xml_attribute
recordAttributeValueTypeCharString = _QTils.recordAttributeValueTypeCharString
recordAttributeValueTypeInteger = _QTils.recordAttributeValueTypeInteger
recordAttributeValueTypePercent = _QTils.recordAttributeValueTypePercent
recordAttributeValueTypeBoolean = _QTils.recordAttributeValueTypeBoolean
recordAttributeValueTypeOnOff = _QTils.recordAttributeValueTypeOnOff
recordAttributeValueTypeDouble = _QTils.recordAttributeValueTypeDouble
MAX_RECORD_ATTRIBUTE_VALUE_TYPE = _QTils.MAX_RECORD_ATTRIBUTE_VALUE_TYPE
class XML_ParsedValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XML_ParsedValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XML_ParsedValue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stringValue"] = _QTils.XML_ParsedValue_stringValue_set
    __swig_getmethods__["stringValue"] = _QTils.XML_ParsedValue_stringValue_get
    if _newclass:stringValue = _swig_property(_QTils.XML_ParsedValue_stringValue_get, _QTils.XML_ParsedValue_stringValue_set)
    __swig_setmethods__["integerValue"] = _QTils.XML_ParsedValue_integerValue_set
    __swig_getmethods__["integerValue"] = _QTils.XML_ParsedValue_integerValue_get
    if _newclass:integerValue = _swig_property(_QTils.XML_ParsedValue_integerValue_get, _QTils.XML_ParsedValue_integerValue_set)
    __swig_setmethods__["doubleValue"] = _QTils.XML_ParsedValue_doubleValue_set
    __swig_getmethods__["doubleValue"] = _QTils.XML_ParsedValue_doubleValue_get
    if _newclass:doubleValue = _swig_property(_QTils.XML_ParsedValue_doubleValue_get, _QTils.XML_ParsedValue_doubleValue_set)
    __swig_setmethods__["booleanValue"] = _QTils.XML_ParsedValue_booleanValue_set
    __swig_getmethods__["booleanValue"] = _QTils.XML_ParsedValue_booleanValue_get
    if _newclass:booleanValue = _swig_property(_QTils.XML_ParsedValue_booleanValue_get, _QTils.XML_ParsedValue_booleanValue_set)
    def __init__(self): 
        this = _QTils.new_XML_ParsedValue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_XML_ParsedValue
    __del__ = lambda self : None;
XML_ParsedValue_swigregister = _QTils.XML_ParsedValue_swigregister
XML_ParsedValue_swigregister(XML_ParsedValue)

class XML_Record(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XML_Record, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XML_Record, name)
    __repr__ = _swig_repr
    __swig_setmethods__["itemType"] = _QTils.XML_Record_itemType_set
    __swig_getmethods__["itemType"] = _QTils.XML_Record_itemType_get
    if _newclass:itemType = _swig_property(_QTils.XML_Record_itemType_get, _QTils.XML_Record_itemType_set)
    __swig_getmethods__["xml"] = _QTils.XML_Record_xml_get
    if _newclass:xml = _swig_property(_QTils.XML_Record_xml_get)
    __swig_getmethods__["reading"] = _QTils.XML_Record_reading_get
    if _newclass:reading = _swig_property(_QTils.XML_Record_reading_get)
    def __init__(self): 
        this = _QTils.new_XML_Record()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_XML_Record
    __del__ = lambda self : None;
XML_Record_swigregister = _QTils.XML_Record_swigregister
XML_Record_swigregister(XML_Record)

class XML_Record_reading(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XML_Record_reading, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XML_Record_reading, name)
    __repr__ = _swig_repr
    __swig_setmethods__["parsed"] = _QTils.XML_Record_reading_parsed_set
    __swig_getmethods__["parsed"] = _QTils.XML_Record_reading_parsed_get
    if _newclass:parsed = _swig_property(_QTils.XML_Record_reading_parsed_get, _QTils.XML_Record_reading_parsed_set)
    __swig_setmethods__["handler"] = _QTils.XML_Record_reading_handler_set
    __swig_getmethods__["handler"] = _QTils.XML_Record_reading_handler_get
    if _newclass:handler = _swig_property(_QTils.XML_Record_reading_handler_get, _QTils.XML_Record_reading_handler_set)
    def __init__(self): 
        this = _QTils.new_XML_Record_reading()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_XML_Record_reading
    __del__ = lambda self : None;
XML_Record_reading_swigregister = _QTils.XML_Record_reading_swigregister
XML_Record_reading_swigregister(XML_Record_reading)

class XML_Record_xml(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XML_Record_xml, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XML_Record_xml, name)
    __repr__ = _swig_repr
    __swig_getmethods__["element"] = _QTils.XML_Record_xml_element_get
    if _newclass:element = _swig_property(_QTils.XML_Record_xml_element_get)
    __swig_getmethods__["attribute"] = _QTils.XML_Record_xml_attribute_get
    if _newclass:attribute = _swig_property(_QTils.XML_Record_xml_attribute_get)
    def __init__(self): 
        this = _QTils.new_XML_Record_xml()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_XML_Record_xml
    __del__ = lambda self : None;
XML_Record_xml_swigregister = _QTils.XML_Record_xml_swigregister
XML_Record_xml_swigregister(XML_Record_xml)

class XML_Record_xml_attribute(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XML_Record_xml_attribute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XML_Record_xml_attribute, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Tag"] = _QTils.XML_Record_xml_attribute_Tag_set
    __swig_getmethods__["Tag"] = _QTils.XML_Record_xml_attribute_Tag_get
    if _newclass:Tag = _swig_property(_QTils.XML_Record_xml_attribute_Tag_get, _QTils.XML_Record_xml_attribute_Tag_set)
    __swig_setmethods__["ID"] = _QTils.XML_Record_xml_attribute_ID_set
    __swig_getmethods__["ID"] = _QTils.XML_Record_xml_attribute_ID_get
    if _newclass:ID = _swig_property(_QTils.XML_Record_xml_attribute_ID_get, _QTils.XML_Record_xml_attribute_ID_set)
    __swig_setmethods__["Type"] = _QTils.XML_Record_xml_attribute_Type_set
    __swig_getmethods__["Type"] = _QTils.XML_Record_xml_attribute_Type_get
    if _newclass:Type = _swig_property(_QTils.XML_Record_xml_attribute_Type_get, _QTils.XML_Record_xml_attribute_Type_set)
    def __init__(self): 
        this = _QTils.new_XML_Record_xml_attribute()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_XML_Record_xml_attribute
    __del__ = lambda self : None;
XML_Record_xml_attribute_swigregister = _QTils.XML_Record_xml_attribute_swigregister
XML_Record_xml_attribute_swigregister(XML_Record_xml_attribute)

class XML_Record_xml_element(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XML_Record_xml_element, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XML_Record_xml_element, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Tag"] = _QTils.XML_Record_xml_element_Tag_set
    __swig_getmethods__["Tag"] = _QTils.XML_Record_xml_element_Tag_get
    if _newclass:Tag = _swig_property(_QTils.XML_Record_xml_element_Tag_get, _QTils.XML_Record_xml_element_Tag_set)
    __swig_setmethods__["ID"] = _QTils.XML_Record_xml_element_ID_set
    __swig_getmethods__["ID"] = _QTils.XML_Record_xml_element_ID_get
    if _newclass:ID = _swig_property(_QTils.XML_Record_xml_element_ID_get, _QTils.XML_Record_xml_element_ID_set)
    __swig_setmethods__["unused"] = _QTils.XML_Record_xml_element_unused_set
    __swig_getmethods__["unused"] = _QTils.XML_Record_xml_element_unused_get
    if _newclass:unused = _swig_property(_QTils.XML_Record_xml_element_unused_get, _QTils.XML_Record_xml_element_unused_set)
    def __init__(self): 
        this = _QTils.new_XML_Record_xml_element()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_XML_Record_xml_element
    __del__ = lambda self : None;
XML_Record_xml_element_swigregister = _QTils.XML_Record_xml_element_swigregister
XML_Record_xml_element_swigregister(XML_Record_xml_element)


def Check4XMLError(*args):
  return _QTils.Check4XMLError(*args)
Check4XMLError = _QTils.Check4XMLError

def ParseXMLFile(*args):
  return _QTils.ParseXMLFile(*args)
ParseXMLFile = _QTils.ParseXMLFile

def XMLParserAddElement(*args):
  return _QTils.XMLParserAddElement(*args)
XMLParserAddElement = _QTils.XMLParserAddElement

def XMLParserAddElementAttribute(*args):
  return _QTils.XMLParserAddElementAttribute(*args)
XMLParserAddElementAttribute = _QTils.XMLParserAddElementAttribute

def CreateXMLParser(*args):
  return _QTils.CreateXMLParser(*args)
CreateXMLParser = _QTils.CreateXMLParser

def DisposeXMLParser(*args):
  return _QTils.DisposeXMLParser(*args)
DisposeXMLParser = _QTils.DisposeXMLParser

def ReadXMLContent(*args):
  return _QTils.ReadXMLContent(*args)
ReadXMLContent = _QTils.ReadXMLContent

def XMLElementContents(*args):
  return _QTils.XMLElementContents(*args)
XMLElementContents = _QTils.XMLElementContents

def XMLRootElementID(*args):
  return _QTils.XMLRootElementID(*args)
XMLRootElementID = _QTils.XMLRootElementID

def XMLContentKind(*args):
  return _QTils.XMLContentKind(*args)
XMLContentKind = _QTils.XMLContentKind

def XMLRootElementContentKind(*args):
  return _QTils.XMLRootElementContentKind(*args)
XMLRootElementContentKind = _QTils.XMLRootElementContentKind

def XMLContentOfElementOfRootElement(*args):
  return _QTils.XMLContentOfElementOfRootElement(*args)
XMLContentOfElementOfRootElement = _QTils.XMLContentOfElementOfRootElement

def XMLContentOfElement(*args):
  return _QTils.XMLContentOfElement(*args)
XMLContentOfElement = _QTils.XMLContentOfElement

def XMLElementOfContent(*args):
  return _QTils.XMLElementOfContent(*args)
XMLElementOfContent = _QTils.XMLElementOfContent

def GetAttributeIndex(*args):
  return _QTils.GetAttributeIndex(*args)
GetAttributeIndex = _QTils.GetAttributeIndex

def GetStringAttribute(*args):
  return _QTils.GetStringAttribute(*args)
GetStringAttribute = _QTils.GetStringAttribute

def GetIntegerAttribute(*args):
  return _QTils.GetIntegerAttribute(*args)
GetIntegerAttribute = _QTils.GetIntegerAttribute

def GetShortAttribute(*args):
  return _QTils.GetShortAttribute(*args)
GetShortAttribute = _QTils.GetShortAttribute

def GetDoubleAttribute(*args):
  return _QTils.GetDoubleAttribute(*args)
GetDoubleAttribute = _QTils.GetDoubleAttribute

def GetBooleanAttribute(*args):
  return _QTils.GetBooleanAttribute(*args)
GetBooleanAttribute = _QTils.GetBooleanAttribute
class LibQTilsBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LibQTilsBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LibQTilsBase, name)
    __repr__ = _swig_repr
    __swig_setmethods__["OpenQT"] = _QTils.LibQTilsBase_OpenQT_set
    __swig_getmethods__["OpenQT"] = _QTils.LibQTilsBase_OpenQT_get
    if _newclass:OpenQT = _swig_property(_QTils.LibQTilsBase_OpenQT_get, _QTils.LibQTilsBase_OpenQT_set)
    __swig_setmethods__["CloseQT"] = _QTils.LibQTilsBase_CloseQT_set
    __swig_getmethods__["CloseQT"] = _QTils.LibQTilsBase_CloseQT_get
    if _newclass:CloseQT = _swig_property(_QTils.LibQTilsBase_CloseQT_get, _QTils.LibQTilsBase_CloseQT_set)
    __swig_setmethods__["QTCompressionCodec"] = _QTils.LibQTilsBase_QTCompressionCodec_set
    __swig_getmethods__["QTCompressionCodec"] = _QTils.LibQTilsBase_QTCompressionCodec_get
    if _newclass:QTCompressionCodec = _swig_property(_QTils.LibQTilsBase_QTCompressionCodec_get, _QTils.LibQTilsBase_QTCompressionCodec_set)
    __swig_setmethods__["QTCompressionQuality"] = _QTils.LibQTilsBase_QTCompressionQuality_set
    __swig_getmethods__["QTCompressionQuality"] = _QTils.LibQTilsBase_QTCompressionQuality_get
    if _newclass:QTCompressionQuality = _swig_property(_QTils.LibQTilsBase_QTCompressionQuality_get, _QTils.LibQTilsBase_QTCompressionQuality_set)
    __swig_setmethods__["MCAction"] = _QTils.LibQTilsBase_MCAction_set
    __swig_getmethods__["MCAction"] = _QTils.LibQTilsBase_MCAction_get
    if _newclass:MCAction = _swig_property(_QTils.LibQTilsBase_MCAction_get, _QTils.LibQTilsBase_MCAction_set)
    __swig_setmethods__["_QTMovieWindowH_Check_"] = _QTils.LibQTilsBase__QTMovieWindowH_Check__set
    __swig_getmethods__["_QTMovieWindowH_Check_"] = _QTils.LibQTilsBase__QTMovieWindowH_Check__get
    if _newclass:_QTMovieWindowH_Check_ = _swig_property(_QTils.LibQTilsBase__QTMovieWindowH_Check__get, _QTils.LibQTilsBase__QTMovieWindowH_Check__set)
    __swig_setmethods__["OpenQTMovieInWindow"] = _QTils.LibQTilsBase_OpenQTMovieInWindow_set
    __swig_getmethods__["OpenQTMovieInWindow"] = _QTils.LibQTilsBase_OpenQTMovieInWindow_get
    if _newclass:OpenQTMovieInWindow = _swig_property(_QTils.LibQTilsBase_OpenQTMovieInWindow_get, _QTils.LibQTilsBase_OpenQTMovieInWindow_set)
    __swig_setmethods__["CloseQTMovieWindow"] = _QTils.LibQTilsBase_CloseQTMovieWindow_set
    __swig_getmethods__["CloseQTMovieWindow"] = _QTils.LibQTilsBase_CloseQTMovieWindow_get
    if _newclass:CloseQTMovieWindow = _swig_property(_QTils.LibQTilsBase_CloseQTMovieWindow_get, _QTils.LibQTilsBase_CloseQTMovieWindow_set)
    __swig_setmethods__["QTils_LogMsgEx"] = _QTils.LibQTilsBase_QTils_LogMsgEx_set
    __swig_getmethods__["QTils_LogMsgEx"] = _QTils.LibQTilsBase_QTils_LogMsgEx_get
    if _newclass:QTils_LogMsgEx = _swig_property(_QTils.LibQTilsBase_QTils_LogMsgEx_get, _QTils.LibQTilsBase_QTils_LogMsgEx_set)
    __swig_setmethods__["vsscanf"] = _QTils.LibQTilsBase_vsscanf_set
    __swig_getmethods__["vsscanf"] = _QTils.LibQTilsBase_vsscanf_get
    if _newclass:vsscanf = _swig_property(_QTils.LibQTilsBase_vsscanf_get, _QTils.LibQTilsBase_vsscanf_set)
    __swig_setmethods__["vsnprintf"] = _QTils.LibQTilsBase_vsnprintf_set
    __swig_getmethods__["vsnprintf"] = _QTils.LibQTilsBase_vsnprintf_get
    if _newclass:vsnprintf = _swig_property(_QTils.LibQTilsBase_vsnprintf_get, _QTils.LibQTilsBase_vsnprintf_set)
    __swig_setmethods__["DisposeQTMovieWindow"] = _QTils.LibQTilsBase_DisposeQTMovieWindow_set
    __swig_getmethods__["DisposeQTMovieWindow"] = _QTils.LibQTilsBase_DisposeQTMovieWindow_get
    if _newclass:DisposeQTMovieWindow = _swig_property(_QTils.LibQTilsBase_DisposeQTMovieWindow_get, _QTils.LibQTilsBase_DisposeQTMovieWindow_set)
    __swig_setmethods__["QTMovieWindowHFromMovie"] = _QTils.LibQTilsBase_QTMovieWindowHFromMovie_set
    __swig_getmethods__["QTMovieWindowHFromMovie"] = _QTils.LibQTilsBase_QTMovieWindowHFromMovie_get
    if _newclass:QTMovieWindowHFromMovie = _swig_property(_QTils.LibQTilsBase_QTMovieWindowHFromMovie_get, _QTils.LibQTilsBase_QTMovieWindowHFromMovie_set)
    __swig_setmethods__["ActivateQTMovieWindow"] = _QTils.LibQTilsBase_ActivateQTMovieWindow_set
    __swig_getmethods__["ActivateQTMovieWindow"] = _QTils.LibQTilsBase_ActivateQTMovieWindow_get
    if _newclass:ActivateQTMovieWindow = _swig_property(_QTils.LibQTilsBase_ActivateQTMovieWindow_get, _QTils.LibQTilsBase_ActivateQTMovieWindow_set)
    __swig_setmethods__["QTMovieWindowToggleMCController"] = _QTils.LibQTilsBase_QTMovieWindowToggleMCController_set
    __swig_getmethods__["QTMovieWindowToggleMCController"] = _QTils.LibQTilsBase_QTMovieWindowToggleMCController_get
    if _newclass:QTMovieWindowToggleMCController = _swig_property(_QTils.LibQTilsBase_QTMovieWindowToggleMCController_get, _QTils.LibQTilsBase_QTMovieWindowToggleMCController_set)
    __swig_setmethods__["QTMovieWindowPlay"] = _QTils.LibQTilsBase_QTMovieWindowPlay_set
    __swig_getmethods__["QTMovieWindowPlay"] = _QTils.LibQTilsBase_QTMovieWindowPlay_get
    if _newclass:QTMovieWindowPlay = _swig_property(_QTils.LibQTilsBase_QTMovieWindowPlay_get, _QTils.LibQTilsBase_QTMovieWindowPlay_set)
    __swig_setmethods__["QTMovieWindowStop"] = _QTils.LibQTilsBase_QTMovieWindowStop_set
    __swig_getmethods__["QTMovieWindowStop"] = _QTils.LibQTilsBase_QTMovieWindowStop_get
    if _newclass:QTMovieWindowStop = _swig_property(_QTils.LibQTilsBase_QTMovieWindowStop_get, _QTils.LibQTilsBase_QTMovieWindowStop_set)
    __swig_setmethods__["QTMovieWindowGetTime"] = _QTils.LibQTilsBase_QTMovieWindowGetTime_set
    __swig_getmethods__["QTMovieWindowGetTime"] = _QTils.LibQTilsBase_QTMovieWindowGetTime_get
    if _newclass:QTMovieWindowGetTime = _swig_property(_QTils.LibQTilsBase_QTMovieWindowGetTime_get, _QTils.LibQTilsBase_QTMovieWindowGetTime_set)
    __swig_setmethods__["QTMovieWindowGetFrameTime"] = _QTils.LibQTilsBase_QTMovieWindowGetFrameTime_set
    __swig_getmethods__["QTMovieWindowGetFrameTime"] = _QTils.LibQTilsBase_QTMovieWindowGetFrameTime_get
    if _newclass:QTMovieWindowGetFrameTime = _swig_property(_QTils.LibQTilsBase_QTMovieWindowGetFrameTime_get, _QTils.LibQTilsBase_QTMovieWindowGetFrameTime_set)
    __swig_setmethods__["QTMovieWindowSetTime"] = _QTils.LibQTilsBase_QTMovieWindowSetTime_set
    __swig_getmethods__["QTMovieWindowSetTime"] = _QTils.LibQTilsBase_QTMovieWindowSetTime_get
    if _newclass:QTMovieWindowSetTime = _swig_property(_QTils.LibQTilsBase_QTMovieWindowSetTime_get, _QTils.LibQTilsBase_QTMovieWindowSetTime_set)
    __swig_setmethods__["QTMovieWindowSetFrameTime"] = _QTils.LibQTilsBase_QTMovieWindowSetFrameTime_set
    __swig_getmethods__["QTMovieWindowSetFrameTime"] = _QTils.LibQTilsBase_QTMovieWindowSetFrameTime_get
    if _newclass:QTMovieWindowSetFrameTime = _swig_property(_QTils.LibQTilsBase_QTMovieWindowSetFrameTime_get, _QTils.LibQTilsBase_QTMovieWindowSetFrameTime_set)
    __swig_setmethods__["secondsToFrameTime"] = _QTils.LibQTilsBase_secondsToFrameTime_set
    __swig_getmethods__["secondsToFrameTime"] = _QTils.LibQTilsBase_secondsToFrameTime_get
    if _newclass:secondsToFrameTime = _swig_property(_QTils.LibQTilsBase_secondsToFrameTime_get, _QTils.LibQTilsBase_secondsToFrameTime_set)
    __swig_setmethods__["QTMovieWindowSetGeometry"] = _QTils.LibQTilsBase_QTMovieWindowSetGeometry_set
    __swig_getmethods__["QTMovieWindowSetGeometry"] = _QTils.LibQTilsBase_QTMovieWindowSetGeometry_get
    if _newclass:QTMovieWindowSetGeometry = _swig_property(_QTils.LibQTilsBase_QTMovieWindowSetGeometry_get, _QTils.LibQTilsBase_QTMovieWindowSetGeometry_set)
    __swig_setmethods__["QTMovieWindowGetGeometry"] = _QTils.LibQTilsBase_QTMovieWindowGetGeometry_set
    __swig_getmethods__["QTMovieWindowGetGeometry"] = _QTils.LibQTilsBase_QTMovieWindowGetGeometry_get
    if _newclass:QTMovieWindowGetGeometry = _swig_property(_QTils.LibQTilsBase_QTMovieWindowGetGeometry_get, _QTils.LibQTilsBase_QTMovieWindowGetGeometry_set)
    __swig_setmethods__["register_MCAction"] = _QTils.LibQTilsBase_register_MCAction_set
    __swig_getmethods__["register_MCAction"] = _QTils.LibQTilsBase_register_MCAction_get
    if _newclass:register_MCAction = _swig_property(_QTils.LibQTilsBase_register_MCAction_get, _QTils.LibQTilsBase_register_MCAction_set)
    __swig_setmethods__["get_MCAction"] = _QTils.LibQTilsBase_get_MCAction_set
    __swig_getmethods__["get_MCAction"] = _QTils.LibQTilsBase_get_MCAction_get
    if _newclass:get_MCAction = _swig_property(_QTils.LibQTilsBase_get_MCAction_get, _QTils.LibQTilsBase_get_MCAction_set)
    __swig_setmethods__["unregister_MCAction"] = _QTils.LibQTilsBase_unregister_MCAction_set
    __swig_getmethods__["unregister_MCAction"] = _QTils.LibQTilsBase_unregister_MCAction_get
    if _newclass:unregister_MCAction = _swig_property(_QTils.LibQTilsBase_unregister_MCAction_get, _QTils.LibQTilsBase_unregister_MCAction_set)
    __swig_setmethods__["OpenMovieFromURL"] = _QTils.LibQTilsBase_OpenMovieFromURL_set
    __swig_getmethods__["OpenMovieFromURL"] = _QTils.LibQTilsBase_OpenMovieFromURL_get
    if _newclass:OpenMovieFromURL = _swig_property(_QTils.LibQTilsBase_OpenMovieFromURL_get, _QTils.LibQTilsBase_OpenMovieFromURL_set)
    __swig_setmethods__["HasMovieChanged"] = _QTils.LibQTilsBase_HasMovieChanged_set
    __swig_getmethods__["HasMovieChanged"] = _QTils.LibQTilsBase_HasMovieChanged_get
    if _newclass:HasMovieChanged = _swig_property(_QTils.LibQTilsBase_HasMovieChanged_get, _QTils.LibQTilsBase_HasMovieChanged_set)
    __swig_setmethods__["SaveMovie"] = _QTils.LibQTilsBase_SaveMovie_set
    __swig_getmethods__["SaveMovie"] = _QTils.LibQTilsBase_SaveMovie_get
    if _newclass:SaveMovie = _swig_property(_QTils.LibQTilsBase_SaveMovie_get, _QTils.LibQTilsBase_SaveMovie_set)
    __swig_setmethods__["SaveMovieAsRefMov"] = _QTils.LibQTilsBase_SaveMovieAsRefMov_set
    __swig_getmethods__["SaveMovieAsRefMov"] = _QTils.LibQTilsBase_SaveMovieAsRefMov_get
    if _newclass:SaveMovieAsRefMov = _swig_property(_QTils.LibQTilsBase_SaveMovieAsRefMov_get, _QTils.LibQTilsBase_SaveMovieAsRefMov_set)
    __swig_setmethods__["SaveMovieAs"] = _QTils.LibQTilsBase_SaveMovieAs_set
    __swig_getmethods__["SaveMovieAs"] = _QTils.LibQTilsBase_SaveMovieAs_get
    if _newclass:SaveMovieAs = _swig_property(_QTils.LibQTilsBase_SaveMovieAs_get, _QTils.LibQTilsBase_SaveMovieAs_set)
    __swig_setmethods__["CloseMovie"] = _QTils.LibQTilsBase_CloseMovie_set
    __swig_getmethods__["CloseMovie"] = _QTils.LibQTilsBase_CloseMovie_get
    if _newclass:CloseMovie = _swig_property(_QTils.LibQTilsBase_CloseMovie_get, _QTils.LibQTilsBase_CloseMovie_set)
    __swig_setmethods__["SetMoviePlayHints"] = _QTils.LibQTilsBase_SetMoviePlayHints_set
    __swig_getmethods__["SetMoviePlayHints"] = _QTils.LibQTilsBase_SetMoviePlayHints_get
    if _newclass:SetMoviePlayHints = _swig_property(_QTils.LibQTilsBase_SetMoviePlayHints_get, _QTils.LibQTilsBase_SetMoviePlayHints_set)
    __swig_setmethods__["GetMovieTrackCount"] = _QTils.LibQTilsBase_GetMovieTrackCount_set
    __swig_getmethods__["GetMovieTrackCount"] = _QTils.LibQTilsBase_GetMovieTrackCount_get
    if _newclass:GetMovieTrackCount = _swig_property(_QTils.LibQTilsBase_GetMovieTrackCount_get, _QTils.LibQTilsBase_GetMovieTrackCount_set)
    __swig_setmethods__["GetMovieDuration"] = _QTils.LibQTilsBase_GetMovieDuration_set
    __swig_getmethods__["GetMovieDuration"] = _QTils.LibQTilsBase_GetMovieDuration_get
    if _newclass:GetMovieDuration = _swig_property(_QTils.LibQTilsBase_GetMovieDuration_get, _QTils.LibQTilsBase_GetMovieDuration_set)
    __swig_setmethods__["GetMovieTimeResolution"] = _QTils.LibQTilsBase_GetMovieTimeResolution_set
    __swig_getmethods__["GetMovieTimeResolution"] = _QTils.LibQTilsBase_GetMovieTimeResolution_get
    if _newclass:GetMovieTimeResolution = _swig_property(_QTils.LibQTilsBase_GetMovieTimeResolution_get, _QTils.LibQTilsBase_GetMovieTimeResolution_set)
    __swig_setmethods__["AddMetaDataStringToTrack"] = _QTils.LibQTilsBase_AddMetaDataStringToTrack_set
    __swig_getmethods__["AddMetaDataStringToTrack"] = _QTils.LibQTilsBase_AddMetaDataStringToTrack_get
    if _newclass:AddMetaDataStringToTrack = _swig_property(_QTils.LibQTilsBase_AddMetaDataStringToTrack_get, _QTils.LibQTilsBase_AddMetaDataStringToTrack_set)
    __swig_setmethods__["AddMetaDataStringToMovie"] = _QTils.LibQTilsBase_AddMetaDataStringToMovie_set
    __swig_getmethods__["AddMetaDataStringToMovie"] = _QTils.LibQTilsBase_AddMetaDataStringToMovie_get
    if _newclass:AddMetaDataStringToMovie = _swig_property(_QTils.LibQTilsBase_AddMetaDataStringToMovie_get, _QTils.LibQTilsBase_AddMetaDataStringToMovie_set)
    __swig_setmethods__["GetMetaDataStringLengthFromTrack"] = _QTils.LibQTilsBase_GetMetaDataStringLengthFromTrack_set
    __swig_getmethods__["GetMetaDataStringLengthFromTrack"] = _QTils.LibQTilsBase_GetMetaDataStringLengthFromTrack_get
    if _newclass:GetMetaDataStringLengthFromTrack = _swig_property(_QTils.LibQTilsBase_GetMetaDataStringLengthFromTrack_get, _QTils.LibQTilsBase_GetMetaDataStringLengthFromTrack_set)
    __swig_setmethods__["GetMetaDataStringLengthFromMovie"] = _QTils.LibQTilsBase_GetMetaDataStringLengthFromMovie_set
    __swig_getmethods__["GetMetaDataStringLengthFromMovie"] = _QTils.LibQTilsBase_GetMetaDataStringLengthFromMovie_get
    if _newclass:GetMetaDataStringLengthFromMovie = _swig_property(_QTils.LibQTilsBase_GetMetaDataStringLengthFromMovie_get, _QTils.LibQTilsBase_GetMetaDataStringLengthFromMovie_set)
    __swig_setmethods__["GetMetaDataStringFromTrack"] = _QTils.LibQTilsBase_GetMetaDataStringFromTrack_set
    __swig_getmethods__["GetMetaDataStringFromTrack"] = _QTils.LibQTilsBase_GetMetaDataStringFromTrack_get
    if _newclass:GetMetaDataStringFromTrack = _swig_property(_QTils.LibQTilsBase_GetMetaDataStringFromTrack_get, _QTils.LibQTilsBase_GetMetaDataStringFromTrack_set)
    __swig_setmethods__["GetMetaDataStringFromMovie"] = _QTils.LibQTilsBase_GetMetaDataStringFromMovie_set
    __swig_getmethods__["GetMetaDataStringFromMovie"] = _QTils.LibQTilsBase_GetMetaDataStringFromMovie_get
    if _newclass:GetMetaDataStringFromMovie = _swig_property(_QTils.LibQTilsBase_GetMetaDataStringFromMovie_get, _QTils.LibQTilsBase_GetMetaDataStringFromMovie_set)
    __swig_setmethods__["FindTextInMovie"] = _QTils.LibQTilsBase_FindTextInMovie_set
    __swig_getmethods__["FindTextInMovie"] = _QTils.LibQTilsBase_FindTextInMovie_get
    if _newclass:FindTextInMovie = _swig_property(_QTils.LibQTilsBase_FindTextInMovie_get, _QTils.LibQTilsBase_FindTextInMovie_set)
    __swig_setmethods__["FindTimeStampInMovieAtTime"] = _QTils.LibQTilsBase_FindTimeStampInMovieAtTime_set
    __swig_getmethods__["FindTimeStampInMovieAtTime"] = _QTils.LibQTilsBase_FindTimeStampInMovieAtTime_get
    if _newclass:FindTimeStampInMovieAtTime = _swig_property(_QTils.LibQTilsBase_FindTimeStampInMovieAtTime_get, _QTils.LibQTilsBase_FindTimeStampInMovieAtTime_set)
    __swig_setmethods__["GetMovieChapterCount"] = _QTils.LibQTilsBase_GetMovieChapterCount_set
    __swig_getmethods__["GetMovieChapterCount"] = _QTils.LibQTilsBase_GetMovieChapterCount_get
    if _newclass:GetMovieChapterCount = _swig_property(_QTils.LibQTilsBase_GetMovieChapterCount_get, _QTils.LibQTilsBase_GetMovieChapterCount_set)
    __swig_setmethods__["GetMovieIndChapter"] = _QTils.LibQTilsBase_GetMovieIndChapter_set
    __swig_getmethods__["GetMovieIndChapter"] = _QTils.LibQTilsBase_GetMovieIndChapter_get
    if _newclass:GetMovieIndChapter = _swig_property(_QTils.LibQTilsBase_GetMovieIndChapter_get, _QTils.LibQTilsBase_GetMovieIndChapter_set)
    __swig_setmethods__["MovieAddChapter"] = _QTils.LibQTilsBase_MovieAddChapter_set
    __swig_getmethods__["MovieAddChapter"] = _QTils.LibQTilsBase_MovieAddChapter_get
    if _newclass:MovieAddChapter = _swig_property(_QTils.LibQTilsBase_MovieAddChapter_get, _QTils.LibQTilsBase_MovieAddChapter_set)
    __swig_setmethods__["Check4XMLError"] = _QTils.LibQTilsBase_Check4XMLError_set
    __swig_getmethods__["Check4XMLError"] = _QTils.LibQTilsBase_Check4XMLError_get
    if _newclass:Check4XMLError = _swig_property(_QTils.LibQTilsBase_Check4XMLError_get, _QTils.LibQTilsBase_Check4XMLError_set)
    __swig_setmethods__["ParseXMLFile"] = _QTils.LibQTilsBase_ParseXMLFile_set
    __swig_getmethods__["ParseXMLFile"] = _QTils.LibQTilsBase_ParseXMLFile_get
    if _newclass:ParseXMLFile = _swig_property(_QTils.LibQTilsBase_ParseXMLFile_get, _QTils.LibQTilsBase_ParseXMLFile_set)
    __swig_setmethods__["XMLnameSpaceID"] = _QTils.LibQTilsBase_XMLnameSpaceID_set
    __swig_getmethods__["XMLnameSpaceID"] = _QTils.LibQTilsBase_XMLnameSpaceID_get
    if _newclass:XMLnameSpaceID = _swig_property(_QTils.LibQTilsBase_XMLnameSpaceID_get, _QTils.LibQTilsBase_XMLnameSpaceID_set)
    __swig_setmethods__["XMLParserAddElement"] = _QTils.LibQTilsBase_XMLParserAddElement_set
    __swig_getmethods__["XMLParserAddElement"] = _QTils.LibQTilsBase_XMLParserAddElement_get
    if _newclass:XMLParserAddElement = _swig_property(_QTils.LibQTilsBase_XMLParserAddElement_get, _QTils.LibQTilsBase_XMLParserAddElement_set)
    __swig_setmethods__["XMLParserAddElementAttribute"] = _QTils.LibQTilsBase_XMLParserAddElementAttribute_set
    __swig_getmethods__["XMLParserAddElementAttribute"] = _QTils.LibQTilsBase_XMLParserAddElementAttribute_get
    if _newclass:XMLParserAddElementAttribute = _swig_property(_QTils.LibQTilsBase_XMLParserAddElementAttribute_get, _QTils.LibQTilsBase_XMLParserAddElementAttribute_set)
    __swig_setmethods__["DisposeXMLParser"] = _QTils.LibQTilsBase_DisposeXMLParser_set
    __swig_getmethods__["DisposeXMLParser"] = _QTils.LibQTilsBase_DisposeXMLParser_get
    if _newclass:DisposeXMLParser = _swig_property(_QTils.LibQTilsBase_DisposeXMLParser_get, _QTils.LibQTilsBase_DisposeXMLParser_set)
    __swig_setmethods__["GetAttributeIndex"] = _QTils.LibQTilsBase_GetAttributeIndex_set
    __swig_getmethods__["GetAttributeIndex"] = _QTils.LibQTilsBase_GetAttributeIndex_get
    if _newclass:GetAttributeIndex = _swig_property(_QTils.LibQTilsBase_GetAttributeIndex_get, _QTils.LibQTilsBase_GetAttributeIndex_set)
    __swig_setmethods__["GetStringAttribute"] = _QTils.LibQTilsBase_GetStringAttribute_set
    __swig_getmethods__["GetStringAttribute"] = _QTils.LibQTilsBase_GetStringAttribute_get
    if _newclass:GetStringAttribute = _swig_property(_QTils.LibQTilsBase_GetStringAttribute_get, _QTils.LibQTilsBase_GetStringAttribute_set)
    __swig_setmethods__["GetIntegerAttribute"] = _QTils.LibQTilsBase_GetIntegerAttribute_set
    __swig_getmethods__["GetIntegerAttribute"] = _QTils.LibQTilsBase_GetIntegerAttribute_get
    if _newclass:GetIntegerAttribute = _swig_property(_QTils.LibQTilsBase_GetIntegerAttribute_get, _QTils.LibQTilsBase_GetIntegerAttribute_set)
    __swig_setmethods__["GetShortAttribute"] = _QTils.LibQTilsBase_GetShortAttribute_set
    __swig_getmethods__["GetShortAttribute"] = _QTils.LibQTilsBase_GetShortAttribute_get
    if _newclass:GetShortAttribute = _swig_property(_QTils.LibQTilsBase_GetShortAttribute_get, _QTils.LibQTilsBase_GetShortAttribute_set)
    __swig_setmethods__["GetDoubleAttribute"] = _QTils.LibQTilsBase_GetDoubleAttribute_set
    __swig_getmethods__["GetDoubleAttribute"] = _QTils.LibQTilsBase_GetDoubleAttribute_get
    if _newclass:GetDoubleAttribute = _swig_property(_QTils.LibQTilsBase_GetDoubleAttribute_get, _QTils.LibQTilsBase_GetDoubleAttribute_set)
    __swig_setmethods__["GetBooleanAttribute"] = _QTils.LibQTilsBase_GetBooleanAttribute_set
    __swig_getmethods__["GetBooleanAttribute"] = _QTils.LibQTilsBase_GetBooleanAttribute_get
    if _newclass:GetBooleanAttribute = _swig_property(_QTils.LibQTilsBase_GetBooleanAttribute_get, _QTils.LibQTilsBase_GetBooleanAttribute_set)
    __swig_setmethods__["open_QTMovieSink"] = _QTils.LibQTilsBase_open_QTMovieSink_set
    __swig_getmethods__["open_QTMovieSink"] = _QTils.LibQTilsBase_open_QTMovieSink_get
    if _newclass:open_QTMovieSink = _swig_property(_QTils.LibQTilsBase_open_QTMovieSink_get, _QTils.LibQTilsBase_open_QTMovieSink_set)
    __swig_setmethods__["open_QTMovieSinkWithData"] = _QTils.LibQTilsBase_open_QTMovieSinkWithData_set
    __swig_getmethods__["open_QTMovieSinkWithData"] = _QTils.LibQTilsBase_open_QTMovieSinkWithData_get
    if _newclass:open_QTMovieSinkWithData = _swig_property(_QTils.LibQTilsBase_open_QTMovieSinkWithData_get, _QTils.LibQTilsBase_open_QTMovieSinkWithData_set)
    __swig_setmethods__["close_QTMovieSink"] = _QTils.LibQTilsBase_close_QTMovieSink_set
    __swig_getmethods__["close_QTMovieSink"] = _QTils.LibQTilsBase_close_QTMovieSink_get
    if _newclass:close_QTMovieSink = _swig_property(_QTils.LibQTilsBase_close_QTMovieSink_get, _QTils.LibQTilsBase_close_QTMovieSink_set)
    __swig_setmethods__["QTMovieSink_AddFrame"] = _QTils.LibQTilsBase_QTMovieSink_AddFrame_set
    __swig_getmethods__["QTMovieSink_AddFrame"] = _QTils.LibQTilsBase_QTMovieSink_AddFrame_get
    if _newclass:QTMovieSink_AddFrame = _swig_property(_QTils.LibQTilsBase_QTMovieSink_AddFrame_get, _QTils.LibQTilsBase_QTMovieSink_AddFrame_set)
    __swig_setmethods__["QTMovieSink_AddFrameWithTime"] = _QTils.LibQTilsBase_QTMovieSink_AddFrameWithTime_set
    __swig_getmethods__["QTMovieSink_AddFrameWithTime"] = _QTils.LibQTilsBase_QTMovieSink_AddFrameWithTime_get
    if _newclass:QTMovieSink_AddFrameWithTime = _swig_property(_QTils.LibQTilsBase_QTMovieSink_AddFrameWithTime_get, _QTils.LibQTilsBase_QTMovieSink_AddFrameWithTime_set)
    __swig_setmethods__["QTMSFrameBuffer"] = _QTils.LibQTilsBase_QTMSFrameBuffer_set
    __swig_getmethods__["QTMSFrameBuffer"] = _QTils.LibQTilsBase_QTMSFrameBuffer_get
    if _newclass:QTMSFrameBuffer = _swig_property(_QTils.LibQTilsBase_QTMSFrameBuffer_get, _QTils.LibQTilsBase_QTMSFrameBuffer_set)
    __swig_setmethods__["QTMSCurrentFrameBuffer"] = _QTils.LibQTilsBase_QTMSCurrentFrameBuffer_set
    __swig_getmethods__["QTMSCurrentFrameBuffer"] = _QTils.LibQTilsBase_QTMSCurrentFrameBuffer_get
    if _newclass:QTMSCurrentFrameBuffer = _swig_property(_QTils.LibQTilsBase_QTMSCurrentFrameBuffer_get, _QTils.LibQTilsBase_QTMSCurrentFrameBuffer_set)
    __swig_setmethods__["QTMSPixelAddress"] = _QTils.LibQTilsBase_QTMSPixelAddress_set
    __swig_getmethods__["QTMSPixelAddress"] = _QTils.LibQTilsBase_QTMSPixelAddress_get
    if _newclass:QTMSPixelAddress = _swig_property(_QTils.LibQTilsBase_QTMSPixelAddress_get, _QTils.LibQTilsBase_QTMSPixelAddress_set)
    __swig_setmethods__["QTMSPixelAddressInCurrentFrameBuffer"] = _QTils.LibQTilsBase_QTMSPixelAddressInCurrentFrameBuffer_set
    __swig_getmethods__["QTMSPixelAddressInCurrentFrameBuffer"] = _QTils.LibQTilsBase_QTMSPixelAddressInCurrentFrameBuffer_get
    if _newclass:QTMSPixelAddressInCurrentFrameBuffer = _swig_property(_QTils.LibQTilsBase_QTMSPixelAddressInCurrentFrameBuffer_get, _QTils.LibQTilsBase_QTMSPixelAddressInCurrentFrameBuffer_set)
    __swig_setmethods__["get_QTMovieSink_Movie"] = _QTils.LibQTilsBase_get_QTMovieSink_Movie_set
    __swig_getmethods__["get_QTMovieSink_Movie"] = _QTils.LibQTilsBase_get_QTMovieSink_Movie_get
    if _newclass:get_QTMovieSink_Movie = _swig_property(_QTils.LibQTilsBase_get_QTMovieSink_Movie_get, _QTils.LibQTilsBase_get_QTMovieSink_Movie_set)
    __swig_setmethods__["get_QTMovieSink_EncodingStats"] = _QTils.LibQTilsBase_get_QTMovieSink_EncodingStats_set
    __swig_getmethods__["get_QTMovieSink_EncodingStats"] = _QTils.LibQTilsBase_get_QTMovieSink_EncodingStats_get
    if _newclass:get_QTMovieSink_EncodingStats = _swig_property(_QTils.LibQTilsBase_get_QTMovieSink_EncodingStats_get, _QTils.LibQTilsBase_get_QTMovieSink_EncodingStats_set)
    __swig_setmethods__["LastQTError"] = _QTils.LibQTilsBase_LastQTError_set
    __swig_getmethods__["LastQTError"] = _QTils.LibQTilsBase_LastQTError_get
    if _newclass:LastQTError = _swig_property(_QTils.LibQTilsBase_LastQTError_get, _QTils.LibQTilsBase_LastQTError_set)
    __swig_setmethods__["PumpMessages"] = _QTils.LibQTilsBase_PumpMessages_set
    __swig_getmethods__["PumpMessages"] = _QTils.LibQTilsBase_PumpMessages_get
    if _newclass:PumpMessages = _swig_property(_QTils.LibQTilsBase_PumpMessages_get, _QTils.LibQTilsBase_PumpMessages_set)
    __swig_setmethods__["QTils_LogMsg"] = _QTils.LibQTilsBase_QTils_LogMsg_set
    __swig_getmethods__["QTils_LogMsg"] = _QTils.LibQTilsBase_QTils_LogMsg_get
    if _newclass:QTils_LogMsg = _swig_property(_QTils.LibQTilsBase_QTils_LogMsg_get, _QTils.LibQTilsBase_QTils_LogMsg_set)
    __swig_setmethods__["lastSSLogMsg"] = _QTils.LibQTilsBase_lastSSLogMsg_set
    __swig_getmethods__["lastSSLogMsg"] = _QTils.LibQTilsBase_lastSSLogMsg_get
    if _newclass:lastSSLogMsg = _swig_property(_QTils.LibQTilsBase_lastSSLogMsg_get, _QTils.LibQTilsBase_lastSSLogMsg_set)
    __swig_setmethods__["MacErrorString"] = _QTils.LibQTilsBase_MacErrorString_set
    __swig_getmethods__["MacErrorString"] = _QTils.LibQTilsBase_MacErrorString_get
    if _newclass:MacErrorString = _swig_property(_QTils.LibQTilsBase_MacErrorString_get, _QTils.LibQTilsBase_MacErrorString_set)
    def __init__(self): 
        this = _QTils.new_LibQTilsBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QTils.delete_LibQTilsBase
    __del__ = lambda self : None;
LibQTilsBase_swigregister = _QTils.LibQTilsBase_swigregister
LibQTilsBase_swigregister(LibQTilsBase)


def initDMBaseQTils(*args):
  return _QTils.initDMBaseQTils(*args)
initDMBaseQTils = _QTils.initDMBaseQTils
QTMOVIEWINDOW = _QTils.QTMOVIEWINDOW
# This file is compatible with both classic and new-style classes.


